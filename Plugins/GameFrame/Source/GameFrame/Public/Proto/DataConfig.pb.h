// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DataConfig.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_DataConfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_DataConfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_DataConfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_DataConfig_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_DataConfig_2eproto;
namespace pb {
class BPConfig;
struct BPConfigDefaultTypeInternal;
extern BPConfigDefaultTypeInternal _BPConfig_default_instance_;
class BPConfig_BPItem;
struct BPConfig_BPItemDefaultTypeInternal;
extern BPConfig_BPItemDefaultTypeInternal _BPConfig_BPItem_default_instance_;
class GuiConfig;
struct GuiConfigDefaultTypeInternal;
extern GuiConfigDefaultTypeInternal _GuiConfig_default_instance_;
class GuiConfig_UIItem;
struct GuiConfig_UIItemDefaultTypeInternal;
extern GuiConfig_UIItemDefaultTypeInternal _GuiConfig_UIItem_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::BPConfig* Arena::CreateMaybeMessage<::pb::BPConfig>(Arena*);
template<> ::pb::BPConfig_BPItem* Arena::CreateMaybeMessage<::pb::BPConfig_BPItem>(Arena*);
template<> ::pb::GuiConfig* Arena::CreateMaybeMessage<::pb::GuiConfig>(Arena*);
template<> ::pb::GuiConfig_UIItem* Arena::CreateMaybeMessage<::pb::GuiConfig_UIItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class GuiConfig_UIItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GuiConfig.UIItem) */ {
 public:
  inline GuiConfig_UIItem() : GuiConfig_UIItem(nullptr) {}
  ~GuiConfig_UIItem() override;
  explicit PROTOBUF_CONSTEXPR GuiConfig_UIItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuiConfig_UIItem(const GuiConfig_UIItem& from);
  GuiConfig_UIItem(GuiConfig_UIItem&& from) noexcept
    : GuiConfig_UIItem() {
    *this = ::std::move(from);
  }

  inline GuiConfig_UIItem& operator=(const GuiConfig_UIItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuiConfig_UIItem& operator=(GuiConfig_UIItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuiConfig_UIItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuiConfig_UIItem* internal_default_instance() {
    return reinterpret_cast<const GuiConfig_UIItem*>(
               &_GuiConfig_UIItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GuiConfig_UIItem& a, GuiConfig_UIItem& b) {
    a.Swap(&b);
  }
  inline void Swap(GuiConfig_UIItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuiConfig_UIItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuiConfig_UIItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuiConfig_UIItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuiConfig_UIItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuiConfig_UIItem& from) {
    GuiConfig_UIItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuiConfig_UIItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GuiConfig.UIItem";
  }
  protected:
  explicit GuiConfig_UIItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLayoutFieldNumber = 3,
    kScriptFieldNumber = 4,
    kIdFieldNumber = 1,
    kLayerFieldNumber = 2,
  };
  // string layout = 3;
  void clear_layout();
  const std::string& layout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_layout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_layout();
  PROTOBUF_NODISCARD std::string* release_layout();
  void set_allocated_layout(std::string* layout);
  private:
  const std::string& _internal_layout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_layout(const std::string& value);
  std::string* _internal_mutable_layout();
  public:

  // string script = 4;
  void clear_script();
  const std::string& script() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_script(ArgT0&& arg0, ArgT... args);
  std::string* mutable_script();
  PROTOBUF_NODISCARD std::string* release_script();
  void set_allocated_script(std::string* script);
  private:
  const std::string& _internal_script() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_script(const std::string& value);
  std::string* _internal_mutable_script();
  public:

  // int32 id = 1;
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // int32 layer = 2;
  void clear_layer();
  int32_t layer() const;
  void set_layer(int32_t value);
  private:
  int32_t _internal_layer() const;
  void _internal_set_layer(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GuiConfig.UIItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr layout_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr script_;
    int32_t id_;
    int32_t layer_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DataConfig_2eproto;
};
// -------------------------------------------------------------------

class GuiConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GuiConfig) */ {
 public:
  inline GuiConfig() : GuiConfig(nullptr) {}
  ~GuiConfig() override;
  explicit PROTOBUF_CONSTEXPR GuiConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuiConfig(const GuiConfig& from);
  GuiConfig(GuiConfig&& from) noexcept
    : GuiConfig() {
    *this = ::std::move(from);
  }

  inline GuiConfig& operator=(const GuiConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuiConfig& operator=(GuiConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuiConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuiConfig* internal_default_instance() {
    return reinterpret_cast<const GuiConfig*>(
               &_GuiConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GuiConfig& a, GuiConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(GuiConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuiConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GuiConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GuiConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GuiConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GuiConfig& from) {
    GuiConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuiConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GuiConfig";
  }
  protected:
  explicit GuiConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef GuiConfig_UIItem UIItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 1,
  };
  // repeated .pb.GuiConfig.UIItem item_list = 1;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;
  public:
  void clear_item_list();
  ::pb::GuiConfig_UIItem* mutable_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GuiConfig_UIItem >*
      mutable_item_list();
  private:
  const ::pb::GuiConfig_UIItem& _internal_item_list(int index) const;
  ::pb::GuiConfig_UIItem* _internal_add_item_list();
  public:
  const ::pb::GuiConfig_UIItem& item_list(int index) const;
  ::pb::GuiConfig_UIItem* add_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GuiConfig_UIItem >&
      item_list() const;

  // @@protoc_insertion_point(class_scope:pb.GuiConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GuiConfig_UIItem > item_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DataConfig_2eproto;
};
// -------------------------------------------------------------------

class BPConfig_BPItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BPConfig.BPItem) */ {
 public:
  inline BPConfig_BPItem() : BPConfig_BPItem(nullptr) {}
  ~BPConfig_BPItem() override;
  explicit PROTOBUF_CONSTEXPR BPConfig_BPItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BPConfig_BPItem(const BPConfig_BPItem& from);
  BPConfig_BPItem(BPConfig_BPItem&& from) noexcept
    : BPConfig_BPItem() {
    *this = ::std::move(from);
  }

  inline BPConfig_BPItem& operator=(const BPConfig_BPItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BPConfig_BPItem& operator=(BPConfig_BPItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BPConfig_BPItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const BPConfig_BPItem* internal_default_instance() {
    return reinterpret_cast<const BPConfig_BPItem*>(
               &_BPConfig_BPItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BPConfig_BPItem& a, BPConfig_BPItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BPConfig_BPItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BPConfig_BPItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BPConfig_BPItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BPConfig_BPItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BPConfig_BPItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BPConfig_BPItem& from) {
    BPConfig_BPItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BPConfig_BPItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BPConfig.BPItem";
  }
  protected:
  explicit BPConfig_BPItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBpNameFieldNumber = 1,
    kLuaNameFieldNumber = 2,
  };
  // string bp_name = 1;
  void clear_bp_name();
  const std::string& bp_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bp_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bp_name();
  PROTOBUF_NODISCARD std::string* release_bp_name();
  void set_allocated_bp_name(std::string* bp_name);
  private:
  const std::string& _internal_bp_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bp_name(const std::string& value);
  std::string* _internal_mutable_bp_name();
  public:

  // string lua_name = 2;
  void clear_lua_name();
  const std::string& lua_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lua_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lua_name();
  PROTOBUF_NODISCARD std::string* release_lua_name();
  void set_allocated_lua_name(std::string* lua_name);
  private:
  const std::string& _internal_lua_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lua_name(const std::string& value);
  std::string* _internal_mutable_lua_name();
  public:

  // @@protoc_insertion_point(class_scope:pb.BPConfig.BPItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bp_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lua_name_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DataConfig_2eproto;
};
// -------------------------------------------------------------------

class BPConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.BPConfig) */ {
 public:
  inline BPConfig() : BPConfig(nullptr) {}
  ~BPConfig() override;
  explicit PROTOBUF_CONSTEXPR BPConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BPConfig(const BPConfig& from);
  BPConfig(BPConfig&& from) noexcept
    : BPConfig() {
    *this = ::std::move(from);
  }

  inline BPConfig& operator=(const BPConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline BPConfig& operator=(BPConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BPConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const BPConfig* internal_default_instance() {
    return reinterpret_cast<const BPConfig*>(
               &_BPConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BPConfig& a, BPConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(BPConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BPConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BPConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BPConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BPConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const BPConfig& from) {
    BPConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BPConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.BPConfig";
  }
  protected:
  explicit BPConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BPConfig_BPItem BPItem;

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 1,
  };
  // repeated .pb.BPConfig.BPItem item_list = 1;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;
  public:
  void clear_item_list();
  ::pb::BPConfig_BPItem* mutable_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BPConfig_BPItem >*
      mutable_item_list();
  private:
  const ::pb::BPConfig_BPItem& _internal_item_list(int index) const;
  ::pb::BPConfig_BPItem* _internal_add_item_list();
  public:
  const ::pb::BPConfig_BPItem& item_list(int index) const;
  ::pb::BPConfig_BPItem* add_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BPConfig_BPItem >&
      item_list() const;

  // @@protoc_insertion_point(class_scope:pb.BPConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BPConfig_BPItem > item_list_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_DataConfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GuiConfig_UIItem

// int32 id = 1;
inline void GuiConfig_UIItem::clear_id() {
  _impl_.id_ = 0;
}
inline int32_t GuiConfig_UIItem::_internal_id() const {
  return _impl_.id_;
}
inline int32_t GuiConfig_UIItem::id() const {
  // @@protoc_insertion_point(field_get:pb.GuiConfig.UIItem.id)
  return _internal_id();
}
inline void GuiConfig_UIItem::_internal_set_id(int32_t value) {
  
  _impl_.id_ = value;
}
inline void GuiConfig_UIItem::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:pb.GuiConfig.UIItem.id)
}

// int32 layer = 2;
inline void GuiConfig_UIItem::clear_layer() {
  _impl_.layer_ = 0;
}
inline int32_t GuiConfig_UIItem::_internal_layer() const {
  return _impl_.layer_;
}
inline int32_t GuiConfig_UIItem::layer() const {
  // @@protoc_insertion_point(field_get:pb.GuiConfig.UIItem.layer)
  return _internal_layer();
}
inline void GuiConfig_UIItem::_internal_set_layer(int32_t value) {
  
  _impl_.layer_ = value;
}
inline void GuiConfig_UIItem::set_layer(int32_t value) {
  _internal_set_layer(value);
  // @@protoc_insertion_point(field_set:pb.GuiConfig.UIItem.layer)
}

// string layout = 3;
inline void GuiConfig_UIItem::clear_layout() {
  _impl_.layout_.ClearToEmpty();
}
inline const std::string& GuiConfig_UIItem::layout() const {
  // @@protoc_insertion_point(field_get:pb.GuiConfig.UIItem.layout)
  return _internal_layout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuiConfig_UIItem::set_layout(ArgT0&& arg0, ArgT... args) {
 
 _impl_.layout_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GuiConfig.UIItem.layout)
}
inline std::string* GuiConfig_UIItem::mutable_layout() {
  std::string* _s = _internal_mutable_layout();
  // @@protoc_insertion_point(field_mutable:pb.GuiConfig.UIItem.layout)
  return _s;
}
inline const std::string& GuiConfig_UIItem::_internal_layout() const {
  return _impl_.layout_.Get();
}
inline void GuiConfig_UIItem::_internal_set_layout(const std::string& value) {
  
  _impl_.layout_.Set(value, GetArenaForAllocation());
}
inline std::string* GuiConfig_UIItem::_internal_mutable_layout() {
  
  return _impl_.layout_.Mutable(GetArenaForAllocation());
}
inline std::string* GuiConfig_UIItem::release_layout() {
  // @@protoc_insertion_point(field_release:pb.GuiConfig.UIItem.layout)
  return _impl_.layout_.Release();
}
inline void GuiConfig_UIItem::set_allocated_layout(std::string* layout) {
  if (layout != nullptr) {
    
  } else {
    
  }
  _impl_.layout_.SetAllocated(layout, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.layout_.IsDefault()) {
    _impl_.layout_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.GuiConfig.UIItem.layout)
}

// string script = 4;
inline void GuiConfig_UIItem::clear_script() {
  _impl_.script_.ClearToEmpty();
}
inline const std::string& GuiConfig_UIItem::script() const {
  // @@protoc_insertion_point(field_get:pb.GuiConfig.UIItem.script)
  return _internal_script();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuiConfig_UIItem::set_script(ArgT0&& arg0, ArgT... args) {
 
 _impl_.script_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.GuiConfig.UIItem.script)
}
inline std::string* GuiConfig_UIItem::mutable_script() {
  std::string* _s = _internal_mutable_script();
  // @@protoc_insertion_point(field_mutable:pb.GuiConfig.UIItem.script)
  return _s;
}
inline const std::string& GuiConfig_UIItem::_internal_script() const {
  return _impl_.script_.Get();
}
inline void GuiConfig_UIItem::_internal_set_script(const std::string& value) {
  
  _impl_.script_.Set(value, GetArenaForAllocation());
}
inline std::string* GuiConfig_UIItem::_internal_mutable_script() {
  
  return _impl_.script_.Mutable(GetArenaForAllocation());
}
inline std::string* GuiConfig_UIItem::release_script() {
  // @@protoc_insertion_point(field_release:pb.GuiConfig.UIItem.script)
  return _impl_.script_.Release();
}
inline void GuiConfig_UIItem::set_allocated_script(std::string* script) {
  if (script != nullptr) {
    
  } else {
    
  }
  _impl_.script_.SetAllocated(script, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.script_.IsDefault()) {
    _impl_.script_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.GuiConfig.UIItem.script)
}

// -------------------------------------------------------------------

// GuiConfig

// repeated .pb.GuiConfig.UIItem item_list = 1;
inline int GuiConfig::_internal_item_list_size() const {
  return _impl_.item_list_.size();
}
inline int GuiConfig::item_list_size() const {
  return _internal_item_list_size();
}
inline void GuiConfig::clear_item_list() {
  _impl_.item_list_.Clear();
}
inline ::pb::GuiConfig_UIItem* GuiConfig::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.GuiConfig.item_list)
  return _impl_.item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GuiConfig_UIItem >*
GuiConfig::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.GuiConfig.item_list)
  return &_impl_.item_list_;
}
inline const ::pb::GuiConfig_UIItem& GuiConfig::_internal_item_list(int index) const {
  return _impl_.item_list_.Get(index);
}
inline const ::pb::GuiConfig_UIItem& GuiConfig::item_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.GuiConfig.item_list)
  return _internal_item_list(index);
}
inline ::pb::GuiConfig_UIItem* GuiConfig::_internal_add_item_list() {
  return _impl_.item_list_.Add();
}
inline ::pb::GuiConfig_UIItem* GuiConfig::add_item_list() {
  ::pb::GuiConfig_UIItem* _add = _internal_add_item_list();
  // @@protoc_insertion_point(field_add:pb.GuiConfig.item_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::GuiConfig_UIItem >&
GuiConfig::item_list() const {
  // @@protoc_insertion_point(field_list:pb.GuiConfig.item_list)
  return _impl_.item_list_;
}

// -------------------------------------------------------------------

// BPConfig_BPItem

// string bp_name = 1;
inline void BPConfig_BPItem::clear_bp_name() {
  _impl_.bp_name_.ClearToEmpty();
}
inline const std::string& BPConfig_BPItem::bp_name() const {
  // @@protoc_insertion_point(field_get:pb.BPConfig.BPItem.bp_name)
  return _internal_bp_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BPConfig_BPItem::set_bp_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.bp_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.BPConfig.BPItem.bp_name)
}
inline std::string* BPConfig_BPItem::mutable_bp_name() {
  std::string* _s = _internal_mutable_bp_name();
  // @@protoc_insertion_point(field_mutable:pb.BPConfig.BPItem.bp_name)
  return _s;
}
inline const std::string& BPConfig_BPItem::_internal_bp_name() const {
  return _impl_.bp_name_.Get();
}
inline void BPConfig_BPItem::_internal_set_bp_name(const std::string& value) {
  
  _impl_.bp_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BPConfig_BPItem::_internal_mutable_bp_name() {
  
  return _impl_.bp_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BPConfig_BPItem::release_bp_name() {
  // @@protoc_insertion_point(field_release:pb.BPConfig.BPItem.bp_name)
  return _impl_.bp_name_.Release();
}
inline void BPConfig_BPItem::set_allocated_bp_name(std::string* bp_name) {
  if (bp_name != nullptr) {
    
  } else {
    
  }
  _impl_.bp_name_.SetAllocated(bp_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.bp_name_.IsDefault()) {
    _impl_.bp_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.BPConfig.BPItem.bp_name)
}

// string lua_name = 2;
inline void BPConfig_BPItem::clear_lua_name() {
  _impl_.lua_name_.ClearToEmpty();
}
inline const std::string& BPConfig_BPItem::lua_name() const {
  // @@protoc_insertion_point(field_get:pb.BPConfig.BPItem.lua_name)
  return _internal_lua_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BPConfig_BPItem::set_lua_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lua_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.BPConfig.BPItem.lua_name)
}
inline std::string* BPConfig_BPItem::mutable_lua_name() {
  std::string* _s = _internal_mutable_lua_name();
  // @@protoc_insertion_point(field_mutable:pb.BPConfig.BPItem.lua_name)
  return _s;
}
inline const std::string& BPConfig_BPItem::_internal_lua_name() const {
  return _impl_.lua_name_.Get();
}
inline void BPConfig_BPItem::_internal_set_lua_name(const std::string& value) {
  
  _impl_.lua_name_.Set(value, GetArenaForAllocation());
}
inline std::string* BPConfig_BPItem::_internal_mutable_lua_name() {
  
  return _impl_.lua_name_.Mutable(GetArenaForAllocation());
}
inline std::string* BPConfig_BPItem::release_lua_name() {
  // @@protoc_insertion_point(field_release:pb.BPConfig.BPItem.lua_name)
  return _impl_.lua_name_.Release();
}
inline void BPConfig_BPItem::set_allocated_lua_name(std::string* lua_name) {
  if (lua_name != nullptr) {
    
  } else {
    
  }
  _impl_.lua_name_.SetAllocated(lua_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lua_name_.IsDefault()) {
    _impl_.lua_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.BPConfig.BPItem.lua_name)
}

// -------------------------------------------------------------------

// BPConfig

// repeated .pb.BPConfig.BPItem item_list = 1;
inline int BPConfig::_internal_item_list_size() const {
  return _impl_.item_list_.size();
}
inline int BPConfig::item_list_size() const {
  return _internal_item_list_size();
}
inline void BPConfig::clear_item_list() {
  _impl_.item_list_.Clear();
}
inline ::pb::BPConfig_BPItem* BPConfig::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:pb.BPConfig.item_list)
  return _impl_.item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BPConfig_BPItem >*
BPConfig::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.BPConfig.item_list)
  return &_impl_.item_list_;
}
inline const ::pb::BPConfig_BPItem& BPConfig::_internal_item_list(int index) const {
  return _impl_.item_list_.Get(index);
}
inline const ::pb::BPConfig_BPItem& BPConfig::item_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.BPConfig.item_list)
  return _internal_item_list(index);
}
inline ::pb::BPConfig_BPItem* BPConfig::_internal_add_item_list() {
  return _impl_.item_list_.Add();
}
inline ::pb::BPConfig_BPItem* BPConfig::add_item_list() {
  ::pb::BPConfig_BPItem* _add = _internal_add_item_list();
  // @@protoc_insertion_point(field_add:pb.BPConfig.item_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pb::BPConfig_BPItem >&
BPConfig::item_list() const {
  // @@protoc_insertion_point(field_list:pb.BPConfig.item_list)
  return _impl_.item_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_DataConfig_2eproto
