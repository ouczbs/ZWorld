// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Login.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Login_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Login_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Login_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Login_2eproto;
namespace pb {
class LoginAccountAckCmd;
struct LoginAccountAckCmdDefaultTypeInternal;
extern LoginAccountAckCmdDefaultTypeInternal _LoginAccountAckCmd_default_instance_;
class LoginAccountCmd;
struct LoginAccountCmdDefaultTypeInternal;
extern LoginAccountCmdDefaultTypeInternal _LoginAccountCmd_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::LoginAccountAckCmd* Arena::CreateMaybeMessage<::pb::LoginAccountAckCmd>(Arena*);
template<> ::pb::LoginAccountCmd* Arena::CreateMaybeMessage<::pb::LoginAccountCmd>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class LoginAccountCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginAccountCmd) */ {
 public:
  inline LoginAccountCmd() : LoginAccountCmd(nullptr) {}
  ~LoginAccountCmd() override;
  explicit PROTOBUF_CONSTEXPR LoginAccountCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginAccountCmd(const LoginAccountCmd& from);
  LoginAccountCmd(LoginAccountCmd&& from) noexcept
    : LoginAccountCmd() {
    *this = ::std::move(from);
  }

  inline LoginAccountCmd& operator=(const LoginAccountCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAccountCmd& operator=(LoginAccountCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginAccountCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginAccountCmd* internal_default_instance() {
    return reinterpret_cast<const LoginAccountCmd*>(
               &_LoginAccountCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LoginAccountCmd& a, LoginAccountCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAccountCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAccountCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginAccountCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginAccountCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginAccountCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginAccountCmd& from) {
    LoginAccountCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAccountCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginAccountCmd";
  }
  protected:
  explicit LoginAccountCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPasswordFieldNumber = 2,
  };
  // string account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_NODISCARD std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // string password = 2;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginAccountCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Login_2eproto;
};
// -------------------------------------------------------------------

class LoginAccountAckCmd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginAccountAckCmd) */ {
 public:
  inline LoginAccountAckCmd() : LoginAccountAckCmd(nullptr) {}
  ~LoginAccountAckCmd() override;
  explicit PROTOBUF_CONSTEXPR LoginAccountAckCmd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginAccountAckCmd(const LoginAccountAckCmd& from);
  LoginAccountAckCmd(LoginAccountAckCmd&& from) noexcept
    : LoginAccountAckCmd() {
    *this = ::std::move(from);
  }

  inline LoginAccountAckCmd& operator=(const LoginAccountAckCmd& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginAccountAckCmd& operator=(LoginAccountAckCmd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginAccountAckCmd& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginAccountAckCmd* internal_default_instance() {
    return reinterpret_cast<const LoginAccountAckCmd*>(
               &_LoginAccountAckCmd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginAccountAckCmd& a, LoginAccountAckCmd& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginAccountAckCmd* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginAccountAckCmd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginAccountAckCmd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginAccountAckCmd>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginAccountAckCmd& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LoginAccountAckCmd& from) {
    LoginAccountAckCmd::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginAccountAckCmd* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginAccountAckCmd";
  }
  protected:
  explicit LoginAccountAckCmd(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleIdListFieldNumber = 3,
    kResultFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // repeated int32 role_id_list = 3;
  int role_id_list_size() const;
  private:
  int _internal_role_id_list_size() const;
  public:
  void clear_role_id_list();
  private:
  int32_t _internal_role_id_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_role_id_list() const;
  void _internal_add_role_id_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_role_id_list();
  public:
  int32_t role_id_list(int index) const;
  void set_role_id_list(int index, int32_t value);
  void add_role_id_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      role_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_role_id_list();

  // string result = 1;
  void clear_result();
  const std::string& result() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_result(ArgT0&& arg0, ArgT... args);
  std::string* mutable_result();
  PROTOBUF_NODISCARD std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // bool success = 2;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginAccountAckCmd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > role_id_list_;
    mutable std::atomic<int> _role_id_list_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Login_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LoginAccountCmd

// string account = 1;
inline void LoginAccountCmd::clear_account() {
  _impl_.account_.ClearToEmpty();
}
inline const std::string& LoginAccountCmd::account() const {
  // @@protoc_insertion_point(field_get:pb.LoginAccountCmd.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginAccountCmd::set_account(ArgT0&& arg0, ArgT... args) {
 
 _impl_.account_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LoginAccountCmd.account)
}
inline std::string* LoginAccountCmd::mutable_account() {
  std::string* _s = _internal_mutable_account();
  // @@protoc_insertion_point(field_mutable:pb.LoginAccountCmd.account)
  return _s;
}
inline const std::string& LoginAccountCmd::_internal_account() const {
  return _impl_.account_.Get();
}
inline void LoginAccountCmd::_internal_set_account(const std::string& value) {
  
  _impl_.account_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginAccountCmd::_internal_mutable_account() {
  
  return _impl_.account_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginAccountCmd::release_account() {
  // @@protoc_insertion_point(field_release:pb.LoginAccountCmd.account)
  return _impl_.account_.Release();
}
inline void LoginAccountCmd::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  _impl_.account_.SetAllocated(account, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.account_.IsDefault()) {
    _impl_.account_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LoginAccountCmd.account)
}

// string password = 2;
inline void LoginAccountCmd::clear_password() {
  _impl_.password_.ClearToEmpty();
}
inline const std::string& LoginAccountCmd::password() const {
  // @@protoc_insertion_point(field_get:pb.LoginAccountCmd.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginAccountCmd::set_password(ArgT0&& arg0, ArgT... args) {
 
 _impl_.password_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LoginAccountCmd.password)
}
inline std::string* LoginAccountCmd::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:pb.LoginAccountCmd.password)
  return _s;
}
inline const std::string& LoginAccountCmd::_internal_password() const {
  return _impl_.password_.Get();
}
inline void LoginAccountCmd::_internal_set_password(const std::string& value) {
  
  _impl_.password_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginAccountCmd::_internal_mutable_password() {
  
  return _impl_.password_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginAccountCmd::release_password() {
  // @@protoc_insertion_point(field_release:pb.LoginAccountCmd.password)
  return _impl_.password_.Release();
}
inline void LoginAccountCmd::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  _impl_.password_.SetAllocated(password, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.password_.IsDefault()) {
    _impl_.password_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LoginAccountCmd.password)
}

// -------------------------------------------------------------------

// LoginAccountAckCmd

// string result = 1;
inline void LoginAccountAckCmd::clear_result() {
  _impl_.result_.ClearToEmpty();
}
inline const std::string& LoginAccountAckCmd::result() const {
  // @@protoc_insertion_point(field_get:pb.LoginAccountAckCmd.result)
  return _internal_result();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginAccountAckCmd::set_result(ArgT0&& arg0, ArgT... args) {
 
 _impl_.result_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pb.LoginAccountAckCmd.result)
}
inline std::string* LoginAccountAckCmd::mutable_result() {
  std::string* _s = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:pb.LoginAccountAckCmd.result)
  return _s;
}
inline const std::string& LoginAccountAckCmd::_internal_result() const {
  return _impl_.result_.Get();
}
inline void LoginAccountAckCmd::_internal_set_result(const std::string& value) {
  
  _impl_.result_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginAccountAckCmd::_internal_mutable_result() {
  
  return _impl_.result_.Mutable(GetArenaForAllocation());
}
inline std::string* LoginAccountAckCmd::release_result() {
  // @@protoc_insertion_point(field_release:pb.LoginAccountAckCmd.result)
  return _impl_.result_.Release();
}
inline void LoginAccountAckCmd::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  _impl_.result_.SetAllocated(result, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.result_.IsDefault()) {
    _impl_.result_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:pb.LoginAccountAckCmd.result)
}

// bool success = 2;
inline void LoginAccountAckCmd::clear_success() {
  _impl_.success_ = false;
}
inline bool LoginAccountAckCmd::_internal_success() const {
  return _impl_.success_;
}
inline bool LoginAccountAckCmd::success() const {
  // @@protoc_insertion_point(field_get:pb.LoginAccountAckCmd.success)
  return _internal_success();
}
inline void LoginAccountAckCmd::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void LoginAccountAckCmd::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:pb.LoginAccountAckCmd.success)
}

// repeated int32 role_id_list = 3;
inline int LoginAccountAckCmd::_internal_role_id_list_size() const {
  return _impl_.role_id_list_.size();
}
inline int LoginAccountAckCmd::role_id_list_size() const {
  return _internal_role_id_list_size();
}
inline void LoginAccountAckCmd::clear_role_id_list() {
  _impl_.role_id_list_.Clear();
}
inline int32_t LoginAccountAckCmd::_internal_role_id_list(int index) const {
  return _impl_.role_id_list_.Get(index);
}
inline int32_t LoginAccountAckCmd::role_id_list(int index) const {
  // @@protoc_insertion_point(field_get:pb.LoginAccountAckCmd.role_id_list)
  return _internal_role_id_list(index);
}
inline void LoginAccountAckCmd::set_role_id_list(int index, int32_t value) {
  _impl_.role_id_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:pb.LoginAccountAckCmd.role_id_list)
}
inline void LoginAccountAckCmd::_internal_add_role_id_list(int32_t value) {
  _impl_.role_id_list_.Add(value);
}
inline void LoginAccountAckCmd::add_role_id_list(int32_t value) {
  _internal_add_role_id_list(value);
  // @@protoc_insertion_point(field_add:pb.LoginAccountAckCmd.role_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoginAccountAckCmd::_internal_role_id_list() const {
  return _impl_.role_id_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
LoginAccountAckCmd::role_id_list() const {
  // @@protoc_insertion_point(field_list:pb.LoginAccountAckCmd.role_id_list)
  return _internal_role_id_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoginAccountAckCmd::_internal_mutable_role_id_list() {
  return &_impl_.role_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
LoginAccountAckCmd::mutable_role_id_list() {
  // @@protoc_insertion_point(field_mutable_list:pb.LoginAccountAckCmd.role_id_list)
  return _internal_mutable_role_id_list();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Login_2eproto
